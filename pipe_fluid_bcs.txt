test(2);


#if NEUMANN_PRESSURE

  const std::vector<std::vector<Real> >&  phi_face =  fe_face->get_phi();
  const std::vector<std::vector<RealGradient> >& dphi_face = fe_face->get_dphi();
  
  
  const std::vector<Real>& JxW_face = fe_face->get_JxW();
  const std::vector<Point>& qface_point = fe_face->get_xyz();
  const std::vector<Point>& face_normals = fe_face->get_normals();
  fe_face->reinit(elem,s);  

  const std::vector<std::vector<Real> >&  psi_face =  fe_face_pres->get_phi();
  const std::vector<std::vector<RealGradient> >& dpsi_face = fe_face_pres->get_dphi();
  fe_face_pres->reinit(elem,s);  


for (unsigned int ns=0; ns<side->n_nodes(); ns++)
    {
       for (unsigned int n=0; n<elem->n_nodes(); n++){
    Node *node = elem->get_node(n);
       Point p;
  for (unsigned int d = 0; d < 3; ++d) {
        unsigned int source_dof = node->dof_number(1, d, 0);
        Real value = aux_system.current_local_solution->el(source_dof);
        p(d)=value;
    }

#if FLUID_P_CONST
 for (unsigned int qp=0; qp<qface->n_points(); qp++)
{  
Number   lambda = 0.;

for (unsigned int l=0; l<psi_face.size(); l++)
{
              lambda += psi_face[l][qp]*last_non_linear_soln.current_local_solution->el(dof_indices_p[l]);

//std::cout<< "last_non_linear_soln.current_local_solution->el(dof_indices_p[l]) "<<last_non_linear_soln.current_local_solution->el(dof_indices_p[l]) <<std::endl;

}
Real val=lambda;
//std::cout<< val<<std::endl;

for (unsigned int i=0; i<psi_face.size(); i++){
Fu(i) +=  -JxW_face[qp]*val*face_normals[qp](0)*phi_face[i][qp];
Fv(i) +=  -JxW_face[qp]*val*face_normals[qp](1)*phi_face[i][qp];
Fw(i) +=  -JxW_face[qp]*val*face_normals[qp](2)*phi_face[i][qp];
}
}  
#endif

    if ((elem->node(n) == side->node(ns)) && (p(0)<0.01)   )

    for (unsigned int qp=0; qp<qface->n_points(); qp++)
    {       
  if ((elem->node(n) == side->node(ns)) && (p(0)<0.01) && (face_normals[qp](0) < -0.99)  )
{
   Real value=0;
    
      //value = 0.1*(1-exp(-pow(time,2.0)/0.25)) ;
      value = 0.0*progress ;

     #if CHAP_SWELL

   Real factor=0.5;

      value = -factor*1000*(1-exp(-pow(((time+0.00000001)/10.0),2.0)/0.25)) ;
      //value = -500.0*progress ;


     #endif

      //value = 1;
      for (unsigned int i=0; i<phi_face.size(); i++){
        
        #if MASS_NEUMANN_PRESSURE //In Chapelle there is no neumann pressure Bc in the mass concservation eqn.
      //  Fp(i) += - JxW_face[qp]*value*face_normals[qp](0)*phi_face[i][qp];
        #endif

       

//std::cout<< "p " << p<<std::endl;

//std::cout<< face_normals[qp] <<std::endl;

        #if MOMENTUM_NEUMANN_PRESSURE
        Fu(i) +=  JxW_face[qp]*value*face_normals[qp](0)*phi_face[i][qp];
        Fv(i) +=  JxW_face[qp]*value*face_normals[qp](1)*phi_face[i][qp];
        Fw(i) +=  JxW_face[qp]*value*face_normals[qp](2)*phi_face[i][qp];
        #endif

        

        }
    
    #if KCL
Number   lambda = 0.;
for (unsigned int l=0; l<n_p_dofs; l++)
{
              lambda += psi[l][qp]*last_non_linear_soln.current_local_solution->el(dof_indices_p[l]);
}

      for (unsigned int i=0; i<psi_face.size(); i++){
        value = lambda
        Fm(i) += - JxW_face[qp]*value*face_normals[qp](0)*phi_face[i][qp];
        Fm(i) += - JxW_face[qp]*value*face_normals[qp](1)*phi_face[i][qp];
        Fm(i) += - JxW_face[qp]*value*face_normals[qp](2)*phi_face[i][qp];
        } 
        #endif


      for (unsigned int i=0; i<phi_face.size(); i++){
                      for (unsigned int j=0; j<phi_face.size(); j++){
 // Kuu(i,j) += value*face_normals[qp](0)*JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
 // Kvv(i,j) += value*face_normals[qp](1)*JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
 // Kww(i,j) += value*face_normals[qp](2)*JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];

  //  Kuu(i,j) += JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
 // Kvv(i,j) += JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
  //Kww(i,j) += JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
          }
        } 
    } //end qp



  } //end if 


/*
  if ((elem->node(n) == side->node(ns)) && (p(2)<0.01)  )
{
    for (unsigned int qp=0; qp<qface->n_points(); qp++)
    {       

   Real value=time*0.00;

      for (unsigned int i=0; i<phi_face.size(); i++){

        #if MOMENTUM_NEUMANN_PRESSURE
        Fu(i) += - JxW_face[qp]*value*face_normals[qp](0)*phi_face[i][qp];
        Fv(i) += - JxW_face[qp]*value*face_normals[qp](1)*phi_face[i][qp];
        Fw(i) += - JxW_face[qp]*value*face_normals[qp](2)*phi_face[i][qp];
        #endif

      } 
    } //end qp
  } //end if 
  */


  }    
}
#endif //end NEUMANN_PRESSURE


for (unsigned int ns=0; ns<side->n_nodes(); ns++)
    {
     for (unsigned int n=0; n<elem->n_nodes(); n++){
        Node *node = elem->get_node(n);
	     Point p;
	for (unsigned int d = 0; d < 3; ++d) {
      	unsigned int source_dof = node->dof_number(1, d, 0);
      	Real value = aux_system.current_local_solution->el(source_dof);
      	p(d)=value;
   	}
    
//Apply Dirichlet Bcs properly
#if CUBE 
  if ((elem->node(n) == side->node(ns))  )
  {
  #if DIRICHLET_VELOCITY




    

if ((elem->node(n) == side->node(ns)) && ( (p(1)<0.01)  || (p(1)>1.49))  )
    {

       unsigned int source_dof = node->dof_number(system.number(), 1, 0);
       Real value = 0;
       rows.push_back(source_dof);
       system.rhs->set(source_dof,value);
     

    }  //end if

if ((elem->node(n) == side->node(ns)) && ((p(2)<0.01)  || (p(2)>1.49))  )
    {


      unsigned int source_dof = node->dof_number(system.number(), 2, 0);
       Real value = 0;
       rows.push_back(source_dof);
      system.rhs->set(source_dof,value);

    

    }  //end if
    
    


    
    if ((elem->node(n) == side->node(ns)) && (  (p(0)<0.01 ) ) )
    {
     for (unsigned int d = 1; d < 3; ++d) {
        unsigned int source_dof = node->dof_number(system.number(), d, 0);
       Real value = 0;
       rows.push_back(source_dof);
       system.rhs->set(source_dof,value);
    }  //end dimension loop

    /*
       unsigned int source_dof = node->dof_number(system.number(), 0, 0);
    Real value = 0.5* ( (0.75*0.75-(p(1)-0.75)*(p(1)-0.75)) + (0.75*0.75-(p(2)-0.75)*(p(2)-0.75)) ) ;

Real Y = 0.1* ( (0.75*0.75-(p(1)-0.75)*(p(1)-0.75)) + (0.75*0.75-(p(2)-0.75)*(p(2)-0.75)) ) ; 

Real pi=3.14159265;

value=0.5*sin(progress*pi*time)*sin(progress*pi*time);  

    rows.push_back(source_dof);
      system.rhs->set(source_dof,value);
     */
  
    }  //end if



    
#endif 

/*
//Apply some pressure BCs

    if ((elem->node(n) == side->node(ns)) && (p(0)>1.4999 ) )
    {
       unsigned int source_dof = node->dof_number(system.number(), 3, 0);
       if (source_dof <12345678){ //The pressures do not exist everywhere// This is a hack !!
       Real value = 0;
       pressure_rows.push_back(source_dof);
      system.rhs->set(source_dof,value);
     }
    }  //end if



    if ((elem->node(n) == side->node(ns)) && (p(0)<0.001 ) )
    {
       unsigned int source_dof = node->dof_number(system.number(), 3, 0);
       if (source_dof <12345678){ //The pressures do not exist everywhere// This is a hack !!
       Real  value = 1*500*(1-exp(-pow((time/10),2.0)/0.25)) ;
       pressure_rows.push_back(source_dof);
      system.rhs->set(source_dof,value);
     }
    }  //end if
*/





} //((elem->node(n) == side->node(ns))  )



#endif //end cube
} // end nodes on side loop

}//for loop
  
