
for (unsigned int s=0; s<elem->n_sides(); s++){
   if (elem->neighbor(s) == NULL)
   {		
   AutoPtr<Elem> side (elem->build_side(s));





#if TRACTION_BC
  const std::vector<std::vector<Real> >&  phi_face =  fe_face->get_phi();
  const std::vector<std::vector<RealGradient> >& dphi_face = fe_face->get_dphi();
  const std::vector<Real>& JxW_face = fe_face->get_JxW();
  const std::vector<Point>& qface_point = fe_face->get_xyz();
  const std::vector<Point>& face_normals = fe_face->get_normals();
  fe_face->reinit(elem,s);  

  const std::vector<Point>& qface_point_ref = fe_face_ref->get_xyz();
  fe_face_ref->reinit(elem,s);  


for (unsigned int ns=0; ns<side->n_nodes(); ns++)
    {
       for (unsigned int n=0; n<elem->n_nodes(); n++){
    Node *node = elem->get_node(n);
       Point p;
  for (unsigned int d = 0; d < 3; ++d) {
        unsigned int source_dof = node->dof_number(1, d, 0);
        Real value = ref_sys.current_local_solution->el(source_dof);
        p(d)=value;
    }

#if ANALNEO
 
   if ((elem->node(n) == side->node(ns)) && (p(0)>0.001)   )
{
for (unsigned int qp=0; qp<qface->n_points(); qp++)
    {


std::vector<unsigned int> undefo_index;

   Point p_qp_ref;
     for (unsigned int d = 0; d < 3; ++d) {
      std::vector<Number> u_undefo;
      ref_sys.get_dof_map().dof_indices(elem, undefo_index,d);
      ref_sys.current_local_solution->get(undefo_index, u_undefo);
      for (unsigned int l = 0; l != n_u_dofs; l++){
         p_qp_ref(d) += phi_face[l][qp]*u_undefo[l]; 

       }
    }


//std::cout<<" p_qp_ref " <<p_qp_ref <<std::endl;




//       if ((elem->node(n) == side->node(ns)) && (p_qp_ref(0)>0.001)  )


/*
Real a= 0.1;
Real b= 0.1;
Real c1= 0.1;

Real lam1 = 1+a*p_qp_ref(0);
Real lam2 = 1+b*p_qp_ref(1);

Real invlam1 = 1.0/lam1;
Real invlam2 = 1.0/lam2;

Real Z = p_qp_ref(2);


RealTensor S;
S(0,0)=lam1-invlam1;
S(0,2)=-a*Z*invlam1*invlam1*invlam2;
S(1,1)=lam2-invlam2;
S(1,2)=-b*Z*invlam1*invlam2*invlam2;
S(2,0)=-a*Z*invlam1*invlam1;
S(2,1)=-b*Z*invlam2*invlam2;
S(2,2)=invlam1*invlam2-lam1*lam2;

RealTensor F;
F(0,0)=lam1;
F(1,1)=lam2;
F(2,0)=-a*Z*invlam1*invlam1*invlam2;
F(2,1)=-b*Z*invlam1*invlam2*invlam2;
F(2,2)=invlam1*invlam2;
RealTensor Ft = F.transpose();
RealTensor sigma;
sigma=(1.0/(F.det()))*F*S*Ft;
//std::cout<<" trac before " <<traction <<std::endl;
DenseVector<Real> trac(3);
//tensor_mult_vector(trac, sigma, face_normals[qp]);
trac.scale(1.0/(F.det()));
  trac.scale(progress);
*/



DenseVector<Real> traction(3);
get_traction(traction,p_qp_ref, progress); 
//std::cout<<" get_traction " <<traction <<std::endl;


DenseVector<Real> traction_current(3);
//get_traction_current(traction_current,p_qp_ref,progress); 
get_traction_current(traction_current,p_qp_ref,progress); 


traction.scale(0);
traction_current.scale(0);


       for (unsigned int i=0; i<phi_face.size(); i++){
     
          Fu(i) += - JxW_face[qp]*traction(0)*phi_face[i][qp];
          Fv(i) += - JxW_face[qp]*traction(1)*phi_face[i][qp];
          Fw(i) += -JxW_face[qp]*traction(2)*phi_face[i][qp];




          Fu(i) += - JxW_face[qp]*traction_current(0)*face_normals[qp](0)*phi_face[i][qp];
          Fv(i) += - JxW_face[qp]*traction_current(1)*face_normals[qp](1)*phi_face[i][qp];
          Fw(i) += - JxW_face[qp]*traction_current(2)*face_normals[qp](2)*phi_face[i][qp];

/*
        Fu(i) += - JxW_face[qp]*traction_current(0)*phi_face[i][qp];
        Fv(i) += - JxW_face[qp]*traction_current(1)*phi_face[i][qp];
        Fw(i) += - JxW_face[qp]*traction_current(2)*phi_face[i][qp];
*/

        }

          for (unsigned int i=0; i<phi_face.size(); i++){
  
            for (unsigned int j=0; j<phi_face.size(); j++){
/*
  Kuu(i,j) += traction(0)*face_normals[qp](0)*JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
  Kvv(i,j) += traction(1)*face_normals[qp](1)*JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
  Kww(i,j) += traction(2)*face_normals[qp](2)*JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
*/
/*
    Kuu(i,j) += traction(0) *JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
  Kvv(i,j) += traction(1)* JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
  Kww(i,j) += traction(2) *JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
*/
          }
        }  
   

//iHat*anal_u +jHat*anal_v + kHat*anal_w


    } //end qp
  } //end if 
         #endif  
  }    
}
#endif //end NEUMANN_PRESSURE

/*
#if TRACTION_BC
 	const Real penalty = 1.e10;
        Node *noode = side->get_node(0);
    	unsigned int source_dof = noode->dof_number(1, 0, 0);
        Real x_value = ref_sys.current_local_solution->el(noode->dof_number(1, 0, 0));
        Real y_value = ref_sys.current_local_solution->el(noode->dof_number(1, 1, 0));
        Real z_value = ref_sys.current_local_solution->el(noode->dof_number(1, 2, 0));

        const std::vector<std::vector<Real> >&  phi_face =  fe_face->get_phi();
        const std::vector<std::vector<RealGradient> >& dphi_face = fe_face->get_dphi();
        const std::vector<Real>& JxW_face = fe_face->get_JxW();
        const std::vector<Point>& qface_point = fe_face->get_xyz();
        const std::vector<Point>& face_normals =
        fe_face->get_normals();
        fe_face->reinit(elem,s);  
        Real rsq=    x_value*x_value + y_value*y_value +z_value*z_value;         


	if( (y_value>0.99) && (x_value>3) )
	{
                for (unsigned int qp=0; qp<qface->n_points(); qp++)
                  {
                    const Number value = +10;
                                                         
                    for (unsigned int i=0; i<phi_face.size(); i++){

                     Fu(i) += - JxW_face[qp]*value*face_normals[qp](0)*phi_face[i][qp];
                     Fv(i) += - JxW_face[qp]*value*face_normals[qp](1)*phi_face[i][qp];
                     Fw(i) += - JxW_face[qp]*value*face_normals[qp](2)*phi_face[i][qp];
		    }
                    for (unsigned int i=0; i<phi_face.size(); i++){
                      for (unsigned int j=0; j<phi_face.size(); j++){
	Kuu(i,j) += value*face_normals[qp](0)*JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
	Kvv(i,j) += value*face_normals[qp](1)*JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
	Kww(i,j) += value*face_normals[qp](2)*JxW_face[qp]*phi_face[i][qp]*phi_face[j][qp];
		      }
		    }     
		} //end qp
	  } //end if
#endif //end Traction BCs
      */     





#if DIRICHLET_CLASSIC
//Apply Dirichlet Bcs properly
test(84);
    for (unsigned int ns=0; ns<side->n_nodes(); ns++)
    {
     for (unsigned int n=0; n<elem->n_nodes(); n++){
       Node *node = elem->get_node(n);
	Point p;
	for (unsigned int d = 0; d < 3; ++d) {
      	unsigned int source_dof = node->dof_number(1, d, 0);
      	Real value = ref_sys.current_local_solution->el(source_dof);
      	p(d)=value;
   	}
	double rsquared = p(0)*p(0) + p(1)*p(1) + p(2)*p(2);
test(84);


#if CUBE 

/*
  if ((elem->node(n) == side->node(ns)) && (p(0)<0.01 )  )
  {
	for (unsigned int d = 0; d < 3; ++d) {
      	unsigned int source_dof = node->dof_number(1, 0, 0);
   	Real value = last_non_linear_soln.current_local_solution->el(source_dof) - ref_sys.current_local_solution->el(source_dof);
        rows.push_back(source_dof);
	newton_update.rhs->set(source_dof,value);
   	}  //end dimension loop
    }  //end if
*/
  

#if MOVING_DIRICHLET_BCS

  if ((elem->node(n) == side->node(ns)) && (p(0)<0.001 )  )
  {
	for (unsigned int d = 0; d < 3; ++d) {
      	unsigned int source_dof = node->dof_number(1, d, 0);
   	Real value = last_non_linear_soln.current_local_solution->el(source_dof) - ref_sys.current_local_solution->el(source_dof);
        rows.push_back(source_dof);
	newton_update.rhs->set(source_dof,value);
   	}  //end dimension loop


    }  //end if

    if ((elem->node(n) == side->node(ns)) && (p(0)>1.49 )  )
    {
	for (unsigned int d = 0; d < 3; ++d) {

      	unsigned int source_dof = node->dof_number(1, 0, 0);
	
	Real value = last_non_linear_soln.current_local_solution->el(source_dof) - ref_sys.current_local_solution->el(source_dof);

        rows.push_back(source_dof);
	newton_update.rhs->set(source_dof,value);
   	}  //end dimension loop


#if DYNAMIC
 //   if (progress<0.1){

      	unsigned int source_dof = node->dof_number(1, 0, 0);
	Real value = last_non_linear_soln.current_local_solution->el(source_dof) - ref_sys.current_local_solution->el(source_dof) - sin(4*progress*PI)*0.6; //sin(progress*PI)*0.1;
        rows.push_back(source_dof);
	newton_update.rhs->set(source_dof,value);



//}
#endif

     }  //end if
     
#endif
     


#if CHAP_SWELL

    if ((elem->node(n) == side->node(ns)) && (p(0)<0.001 )  )
    {
  unsigned int source_dof = node->dof_number(1, 0, 0);
  Real value = last_non_linear_soln.current_local_solution->el(source_dof) - ref_sys.current_local_solution->el(source_dof);
  rows.push_back(source_dof);
  newton_update.rhs->set(source_dof,value);

     }  //end if
 
    if ((elem->node(n) == side->node(ns)) && (p(1)<0.0001 )  )
    {
  unsigned int source_dof = node->dof_number(1, 1, 0);
  Real value = last_non_linear_soln.current_local_solution->el(source_dof) - ref_sys.current_local_solution->el(source_dof);
  rows.push_back(source_dof);
  newton_update.rhs->set(source_dof,value);
     }  //end if


   if ((elem->node(n) == side->node(ns)) && (p(2)<0.0001 )  )
    {
  unsigned int source_dof = node->dof_number(1, 2, 0);
  Real value = last_non_linear_soln.current_local_solution->el(source_dof) - ref_sys.current_local_solution->el(source_dof);
  rows.push_back(source_dof);
  newton_update.rhs->set(source_dof,value);
     }  //end if 
#endif


#if ANALNEO

// if ((elem->node(n) == side->node(ns)) && ( (p(0)<0.001 )  || (p(2)<0.001 ) || (p(2)>0.999 ) || (p(1)<0.001 ) || (p(1)>0.999 )  )   )


  if ((elem->node(n) == side->node(ns)) && ( p(0)<0.001)  ) 
  {

Real X=p(0);
Real Y=p(1);
Real Z=p(2);

  Real a2= progress*0.0;
  Real b2= progress*0.0;

  DenseVector<Real> new_position(3);
 new_position(0) = X + X*X*a2/2.0;
 new_position(1) = Y + Y*Y*b2/2.0;
 new_position(2) = Z/((1+X*a2)*(1+Y*b2));
//std::cout<< "prog 1 "<<new_position<<std::endl;
// new_position.scale(1);
//std::cout<< "progress "<<progress<<std::endl;

	for (unsigned int d = 0; d < 3; ++d) {
      	unsigned int source_dof = node->dof_number(1, d, 0);
   	Real value = last_non_linear_soln.current_local_solution->el(source_dof) -new_position(d);
        rows.push_back(source_dof);
	newton_update.rhs->set(source_dof,value);
   	}  //end dimension loop
    }  //end if

/*
if ((elem->node(n) == side->node(ns)) && ( p(0)>0.999)  ) 
  {

Real X=p(0);
Real Y=p(1);
Real Z=p(2);

  DenseVector<Real> new_position(3);
 new_position(0) = X + 0.5*progress;
 new_position(1) = Y ;
 new_position(2) = Z;


	for (unsigned int d = 0; d < 3; ++d) {
      	unsigned int source_dof = node->dof_number(1, d, 0);
   	Real value = last_non_linear_soln.current_local_solution->el(source_dof) -new_position(d);
        rows.push_back(source_dof);
	newton_update.rhs->set(source_dof,value);
   	}  //end dimension loop
    }  //end if

*/

#endif


#endif       
    } //end nodes in element lopp
} // end nodes on side loop
#endif


  
 }//end elem->neighbor(s) == NULL 
 }// end s=0; s<elem->n_sides(); s++
test(87);
